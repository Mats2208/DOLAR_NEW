---
import LayoutSnapshot from '../components/LayoutSnapshot.astro';
import logo from '../img/logo.png';
import ChartRate from './ChartRate.astro';
import CalculatorPreview from './CalculatorPreview.astro';

const response = await fetch("https://www.dolarbluebolivia.click/api/exchange_currencies");
const exchangeData = await response.json();
const usdToBobRate = exchangeData.blue?.sell ?? 11;

const currencyCountryMap: Record<string, { code: string; symbol: string }> = {
  "Euro": { code: "EU", symbol: "EUR" },
  "Libra Esterlina": { code: "GB", symbol: "GBP" },
  "Peso Argentino": { code: "AR", symbol: "ARS" },
  "Real Brasileño": { code: "BR", symbol: "BRL" },
  "Sol Peruano": { code: "PE", symbol: "PEN" },
  "Yuan Chino": { code: "CN", symbol: "CNY" },
  "blue": { code: "US", symbol: "USD" },
  "official": { code: "US", symbol: "USD" },
};

const currentDateTime = new Date().toLocaleString('es-BO', {
  year: 'numeric',
  month: '2-digit',
  day: '2-digit',
  hour: '2-digit',
  minute: '2-digit',
  second: '2-digit'
});
---

<section id = "ExchangeRates" class="bg-gray-50 py-20 mt-16">
  <div class="container mx-auto px-4 lg:px-6">
    <div class="grid lg:grid-cols-2 gap-8 xl:gap-12 items-center text-center lg:text-left mb-16">
      <!-- Información principal -->
      <div class="order-1 lg:order-1">
        <div class="mb-6">
          <h1 class="text-4xl sm:text-5xl lg:text-5xl xl:text-6xl font-extrabold text-gray-900 mb-6">
            <span class="block">Cotización</span>
            <span class="block bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent">
              Paralela
            </span>
          </h1>
          <div class="text-6xl sm:text-7xl lg:text-6xl xl:text-7xl font-extrabold text-blue-600 mb-6">
            Bs {usdToBobRate.toFixed(2)}
          </div>
          <p class="text-lg sm:text-xl lg:text-lg text-gray-600 max-w-md mx-auto lg:mx-0 mb-8 lg:mb-0">
            Precio del dólar en el mercado paralelo boliviano, actualizado en tiempo real
          </p>
          
          <!-- Botón móvil (solo visible en móvil) -->
          <div class="block lg:hidden mt-8">
            <button
              id="open-modal-mobile"
              class="w-full flex items-center justify-center space-x-3 px-6 py-4 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl hover:from-blue-700 hover:to-blue-800 transition-all duration-300 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <span>Capturar Cotización</span>
            </button>
          </div>
        </div>
      </div>

      <!-- Card de información -->
      <div class="order-2 lg:order-2 hidden lg:block">
        <div class="bg-white/80 backdrop-blur-sm p-6 lg:p-8 rounded-2xl shadow-xl border border-blue-100">
          <div class="text-center mb-6">
            <div class="inline-flex items-center space-x-2 text-gray-600 mb-2">
              <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span class="font-medium">Última actualización</span>
            </div>
            <p class="text-gray-800 font-semibold">{currentDateTime}</p>
          </div>

          <button
            id="open-modal"
            class="w-full flex items-center justify-center space-x-3 px-6 py-4 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl hover:from-blue-700 hover:to-blue-800 transition-all duration-300 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <span>Capturar Cotización</span>
          </button>
        </div>
      </div>    </div>

    <!-- Tabla de otras divisas -->
    <div class="bg-white/80 backdrop-blur-sm p-6 lg:p-8 rounded-2xl shadow-xl border border-blue-100 mt-8">
      <div class="flex items-center space-x-3 mb-6">
        <div class="p-2 bg-blue-100 rounded-lg">
          <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
          </svg>
        </div>
        <h3 class="text-xl lg:text-2xl font-bold text-gray-900">Otras Divisas</h3>
      </div>
      
      <div class="overflow-x-auto">
        <table class="w-full">
          <thead>
            <tr class="border-b-2 border-blue-100">
              <th class="px-4 py-4 text-left text-gray-700 font-semibold text-sm lg:text-base">Moneda</th>
              <th class="px-4 py-4 text-center text-gray-700 font-semibold text-sm lg:text-base">1 USD equivale a:</th>
              <th class="px-4 py-4 text-center text-gray-700 font-semibold text-sm lg:text-base">1 Unidad en BOB</th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-100">
            {
              Object.entries(exchangeData)
                .filter(([key]) => key !== "blue" && key !== "official")
                .map(([currency, values]: [string, any]) => {
                  const country = currencyCountryMap[currency] || { code: "XX", symbol: currency };
                  const flagUrl = `https://flagcdn.com/w40/${country.code.toLowerCase()}.webp`;
                  const sell = values.sell;
                  const currencyValue = `${sell.toFixed(currency === "Peso Argentino" ? 4 : 2)} ${country.symbol}`;
                  const valueInBob = (usdToBobRate / sell).toFixed(currency === "Peso Argentino" ? 4 : 2);
                  return (
                    <tr class="hover:bg-blue-50 transition-colors duration-200">
                      <td class="px-4 py-4">
                        <div class="flex items-center space-x-3">
                          <img src={flagUrl || "/placeholder.svg"} alt={`Bandera de ${currency}`} class="w-8 h-6 object-cover rounded border border-gray-200 shadow-sm" />
                          <span class="text-sm lg:text-base font-medium text-gray-800">{currency}</span>
                        </div>
                      </td>
                      <td class="px-4 py-4 text-center">
                        <span class="text-sm lg:text-base font-bold text-blue-600 bg-blue-50 px-3 py-1 rounded-lg">
                          {currencyValue}
                        </span>
                      </td>
                      <td class="px-4 py-4 text-center">
                        <span class="text-sm lg:text-base font-bold text-green-600 bg-green-50 px-3 py-1 rounded-lg">
                          Bs {valueInBob}
                        </span>
                      </td>
                    </tr>
                  );
                })
            }
          </tbody>
        </table>
      </div>
        <!-- Componente del gráfico -->
      <ChartRate />
    </div>

    <!-- Separador visual -->
    <div id = "CalculadoraPreview" class="mt-12 mb-8">
      <div class="flex items-center justify-center">
        <div class="flex-1 h-px bg-gradient-to-r from-transparent via-gray-300 to-transparent"></div>
        <div class="px-6">
          <div class="flex items-center space-x-2 text-gray-500">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4"></path>
            </svg>
            <span class="text-sm font-medium">Herramientas de Conversión</span>
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4"></path>
            </svg>
          </div>
        </div>
        <div class="flex-1 h-px bg-gradient-to-r from-transparent via-gray-300 to-transparent"></div>
      </div>
    </div>
    
    <CalculatorPreview  
      exchangeData={exchangeData}
      usdToBobRate={usdToBobRate}
      currencyCountryMap={currencyCountryMap}
      lastUpdate={currentDateTime}
    />
  </div>

  <!-- Modal -->
  <div id="capture-modal" class="fixed inset-0 bg-black/60 backdrop-blur-sm hidden z-50 transition-all duration-300 overflow-hidden">
    <div class="fixed top-4 left-1/2 transform -translate-x-1/2 bg-white rounded-2xl lg:rounded-2xl shadow-2xl w-[calc(100%-2rem)] max-h-[calc(100vh-2rem)] lg:max-w-lg lg:w-full lg:max-h-[90vh] transition-all duration-300 scale-95 opacity-0 border border-blue-100 flex flex-col" id="modal-content">
      <div class="flex justify-between items-center p-4 lg:p-6 border-b border-blue-100 bg-gradient-to-r from-blue-50 to-white flex-shrink-0">
        <h2 class="text-xl lg:text-2xl font-bold text-gray-800 flex items-center gap-3">
          <div class="p-2 bg-blue-100 rounded-lg">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 lg:w-6 lg:h-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </div>
          <span class="text-sm lg:text-base">Captura de Cotización</span>
        </h2>
        <button id="close-modal" class="text-gray-400 hover:text-gray-600 transition-colors p-2 hover:bg-gray-100 rounded-full">
          <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <div id="capture-content" class="p-4 lg:p-6 bg-gray-50 flex-1 overflow-auto">
        <LayoutSnapshot
          pageUrl="https://www.dolarbluebolivia.click"
          usdToBobRate={usdToBobRate}
          currentDateTime={currentDateTime}
          logoUrl={logo.src}
        />
      </div>
      
      <div class="p-4 lg:p-6 border-t border-blue-100 bg-white flex-shrink-0">
        <div class="flex flex-col space-y-4">
          <div class="grid grid-cols-3 gap-2">
            <button id="download-png" class="px-3 py-2 lg:px-4 lg:py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition text-sm font-semibold">PNG</button>
            <button id="download-jpeg" class="px-3 py-2 lg:px-4 lg:py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition text-sm font-semibold">JPEG</button>
            <button id="download-svg" class="px-3 py-2 lg:px-4 lg:py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition text-sm font-semibold">SVG</button>
          </div>
          <div id="status" class="text-sm text-gray-500 text-center min-h-[20px]"></div>
        </div>
      </div>
    </div>
  </div>

<script type="module" is:inline>
  document.addEventListener('DOMContentLoaded', async () => {
    const modal = document.getElementById('capture-modal');
    const modalContent = document.getElementById('modal-content');
    const openBtn = document.getElementById('open-modal');
    const openBtnMobile = document.getElementById('open-modal-mobile');
    const closeBtn = document.getElementById('close-modal');
    const captureTarget = document.getElementById('capture-content');
    const status = document.getElementById('status');

    // Cargar dom-to-image dinámicamente
    let domtoimage;
    try {
      const module = await import('https://cdn.skypack.dev/dom-to-image-more');
      domtoimage = module.default;
    } catch (error) {
      console.error('Error cargando dom-to-image:', error);
      status.textContent = 'Error cargando librerías';
      return;
    }

    // Funciones de modal
    const openModal = () => {
      modal?.classList.remove('hidden');
      requestAnimationFrame(() => {
        modalContent?.classList.remove('scale-95', 'opacity-0');
        modalContent?.classList.add('scale-100', 'opacity-100');
      });
    };

    const closeModal = () => {
      modalContent?.classList.remove('scale-100', 'opacity-100');
      modalContent?.classList.add('scale-95', 'opacity-0');
      setTimeout(() => {
        modal?.classList.add('hidden');
      }, 300);
    };

    openBtn?.addEventListener('click', openModal);
    openBtnMobile?.addEventListener('click', openModal);
    closeBtn?.addEventListener('click', closeModal);
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) closeModal();
    });

    // Función para descargar imagen
    const downloadImage = async (format) => {
      if (!captureTarget || !domtoimage) return;

      try {
        status.textContent = `Generando ${format.toUpperCase()}...`;
        
        // Configuración común
        const options = {
          quality: 1.0,
          bgcolor: '#ffffff',
          width: captureTarget.offsetWidth * 2,
          height: captureTarget.offsetHeight * 2,
          style: {
            transform: 'scale(2)',
            transformOrigin: 'top left',
            width: captureTarget.offsetWidth + 'px',
            height: captureTarget.offsetHeight + 'px'
          }
        };

        let dataUrl;
        
        // Generar según el formato
        switch (format) {
          case 'png':
            dataUrl = await domtoimage.toPng(captureTarget, options);
            break;
          case 'jpeg':
            dataUrl = await domtoimage.toJpeg(captureTarget, { ...options, quality: 0.95 });
            break;
          case 'svg':
            dataUrl = await domtoimage.toSvg(captureTarget, options);
            break;
          default:
            throw new Error('Formato no soportado');
        }

        // Crear nombre de archivo
        const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');
        const filename = `cotizacion-usdt-${timestamp}.${format}`;

        // Descargar
        const link = document.createElement('a');
        link.download = filename;
        link.href = dataUrl;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        status.textContent = `${format.toUpperCase()} descargado exitosamente`;
        
        setTimeout(() => {
          status.textContent = '';
        }, 3000);

      } catch (error) {
        console.error(`Error generando ${format}:`, error);
        status.textContent = `Error generando ${format.toUpperCase()}`;
        
        setTimeout(() => {
          status.textContent = '';
        }, 3000);
      }
    };

    // Event listeners para botones de descarga
    document.getElementById('download-png')?.addEventListener('click', () => downloadImage('png'));
    document.getElementById('download-jpeg')?.addEventListener('click', () => downloadImage('jpeg'));
    document.getElementById('download-svg')?.addEventListener('click', () => downloadImage('svg'));

    // Cerrar con ESC
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !modal?.classList.contains('hidden')) {
        closeModal();
      }
    });
  });
</script>

</section>
